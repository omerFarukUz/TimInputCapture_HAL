
TimInputCapture_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c94  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003e40  08003e40  00013e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e58  08003e58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e60  08003e60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007cc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007d8  200007d8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012626  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002102  00000000  00000000  000326a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001070  00000000  00000000  000347a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cea  00000000  00000000  00035818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002518b  00000000  00000000  00036502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011f3f  00000000  00000000  0005b68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e47f7  00000000  00000000  0006d5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000476c  00000000  00000000  00151dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00156530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003e28 	.word	0x08003e28

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003e28 	.word	0x08003e28

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fca2 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f830 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f9ae 	bl	8000854 <MX_GPIO_Init>
  MX_ETH_Init();
 80004f8:	f000 f896 	bl	8000628 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80004fc:	f000 f952 	bl	80007a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000500:	f000 f97a 	bl	80007f8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000504:	f000 f8de 	bl	80006c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000508:	2100      	movs	r1, #0
 800050a:	480f      	ldr	r0, [pc, #60]	; (8000548 <main+0x60>)
 800050c:	f002 f94a 	bl	80027a4 <HAL_TIM_IC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  count_TIM2 = __HAL_TIM_GetCounter(&htim2);
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <main+0x60>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000516:	4a0d      	ldr	r2, [pc, #52]	; (800054c <main+0x64>)
 8000518:	6013      	str	r3, [r2, #0]

	  if(__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_CC1OF))
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <main+0x60>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	691b      	ldr	r3, [r3, #16]
 8000520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000528:	d1f2      	bne.n	8000510 <main+0x28>
	  {

		  capture_value = __HAL_TIM_GetCompare(&htim2, TIM_CHANNEL_1);
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <main+0x60>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <main+0x68>)
 8000532:	6013      	str	r3, [r2, #0]

		  __HAL_TIM_SetCounter(&htim2,0);
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <main+0x60>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2200      	movs	r2, #0
 800053a:	625a      	str	r2, [r3, #36]	; 0x24

		  __HAL_TIM_CLEAR_FLAG(&htim2 , TIM_FLAG_CC1OF);
 800053c:	4b02      	ldr	r3, [pc, #8]	; (8000548 <main+0x60>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8000544:	611a      	str	r2, [r3, #16]
	  count_TIM2 = __HAL_TIM_GetCounter(&htim2);
 8000546:	e7e3      	b.n	8000510 <main+0x28>
 8000548:	20000250 	.word	0x20000250
 800054c:	200007c4 	.word	0x200007c4
 8000550:	200007c8 	.word	0x200007c8

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f003 fc33 	bl	8003dce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a27      	ldr	r2, [pc, #156]	; (8000620 <SystemClock_Config+0xcc>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a0:	4a20      	ldr	r2, [pc, #128]	; (8000624 <SystemClock_Config+0xd0>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005cc:	23a8      	movs	r3, #168	; 0xa8
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d4:	2307      	movs	r3, #7
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fba1 	bl	8001d24 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005e8:	f000 f9e2 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fe03 	bl	8002214 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000614:	f000 f9cc 	bl	80009b0 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <MX_ETH_Init+0x84>)
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <MX_ETH_Init+0x88>)
 8000630:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <MX_ETH_Init+0x8c>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_ETH_Init+0x8c>)
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <MX_ETH_Init+0x8c>)
 8000640:	22e1      	movs	r2, #225	; 0xe1
 8000642:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_ETH_Init+0x8c>)
 8000646:	2200      	movs	r2, #0
 8000648:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_ETH_Init+0x8c>)
 800064c:	2200      	movs	r2, #0
 800064e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_ETH_Init+0x8c>)
 8000652:	2200      	movs	r2, #0
 8000654:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_ETH_Init+0x84>)
 8000658:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <MX_ETH_Init+0x8c>)
 800065a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_ETH_Init+0x84>)
 800065e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000662:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_ETH_Init+0x84>)
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <MX_ETH_Init+0x90>)
 8000668:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_ETH_Init+0x84>)
 800066c:	4a13      	ldr	r2, [pc, #76]	; (80006bc <MX_ETH_Init+0x94>)
 800066e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_ETH_Init+0x84>)
 8000672:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000676:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <MX_ETH_Init+0x84>)
 800067a:	f000 fd57 	bl	800112c <HAL_ETH_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000684:	f000 f994 	bl	80009b0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000688:	2238      	movs	r2, #56	; 0x38
 800068a:	2100      	movs	r1, #0
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <MX_ETH_Init+0x98>)
 800068e:	f003 fb9e 	bl	8003dce <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_ETH_Init+0x98>)
 8000694:	2221      	movs	r2, #33	; 0x21
 8000696:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_ETH_Init+0x98>)
 800069a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800069e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <MX_ETH_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200001a0 	.word	0x200001a0
 80006b0:	40028000 	.word	0x40028000
 80006b4:	200007cc 	.word	0x200007cc
 80006b8:	20000100 	.word	0x20000100
 80006bc:	20000060 	.word	0x20000060
 80006c0:	20000028 	.word	0x20000028

080006c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ee:	4b2c      	ldr	r3, [pc, #176]	; (80007a0 <MX_TIM2_Init+0xdc>)
 80006f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <MX_TIM2_Init+0xdc>)
 80006f8:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80006fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fe:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <MX_TIM2_Init+0xdc>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000704:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <MX_TIM2_Init+0xdc>)
 8000706:	f04f 32ff 	mov.w	r2, #4294967295
 800070a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <MX_TIM2_Init+0xdc>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000712:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <MX_TIM2_Init+0xdc>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000718:	4821      	ldr	r0, [pc, #132]	; (80007a0 <MX_TIM2_Init+0xdc>)
 800071a:	f001 ff9b 	bl	8002654 <HAL_TIM_Base_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000724:	f000 f944 	bl	80009b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	4619      	mov	r1, r3
 8000734:	481a      	ldr	r0, [pc, #104]	; (80007a0 <MX_TIM2_Init+0xdc>)
 8000736:	f002 f9ad 	bl	8002a94 <HAL_TIM_ConfigClockSource>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000740:	f000 f936 	bl	80009b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000744:	4816      	ldr	r0, [pc, #88]	; (80007a0 <MX_TIM2_Init+0xdc>)
 8000746:	f001 ffd4 	bl	80026f2 <HAL_TIM_IC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000750:	f000 f92e 	bl	80009b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4619      	mov	r1, r3
 8000762:	480f      	ldr	r0, [pc, #60]	; (80007a0 <MX_TIM2_Init+0xdc>)
 8000764:	f002 fcf4 	bl	8003150 <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800076e:	f000 f91f 	bl	80009b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000772:	2302      	movs	r3, #2
 8000774:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000776:	2301      	movs	r3, #1
 8000778:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800077e:	230f      	movs	r3, #15
 8000780:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_TIM2_Init+0xdc>)
 800078a:	f002 f8e7 	bl	800295c <HAL_TIM_IC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000794:	f000 f90c 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3728      	adds	r7, #40	; 0x28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000250 	.word	0x20000250

080007a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <MX_USART3_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007dc:	f002 fd34 	bl	8003248 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007e6:	f000 f8e3 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000298 	.word	0x20000298
 80007f4:	40004800 	.word	0x40004800

080007f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000802:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000806:	2204      	movs	r2, #4
 8000808:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080c:	2202      	movs	r2, #2
 800080e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	2202      	movs	r2, #2
 800081a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081e:	2201      	movs	r2, #1
 8000820:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000830:	2201      	movs	r2, #1
 8000832:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083c:	f001 f963 	bl	8001b06 <HAL_PCD_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f8b3 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200002e0 	.word	0x200002e0

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	4b4c      	ldr	r3, [pc, #304]	; (80009a0 <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a4b      	ldr	r2, [pc, #300]	; (80009a0 <MX_GPIO_Init+0x14c>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b49      	ldr	r3, [pc, #292]	; (80009a0 <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	4b45      	ldr	r3, [pc, #276]	; (80009a0 <MX_GPIO_Init+0x14c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a44      	ldr	r2, [pc, #272]	; (80009a0 <MX_GPIO_Init+0x14c>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b42      	ldr	r3, [pc, #264]	; (80009a0 <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b3e      	ldr	r3, [pc, #248]	; (80009a0 <MX_GPIO_Init+0x14c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a3d      	ldr	r2, [pc, #244]	; (80009a0 <MX_GPIO_Init+0x14c>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b3b      	ldr	r3, [pc, #236]	; (80009a0 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b37      	ldr	r3, [pc, #220]	; (80009a0 <MX_GPIO_Init+0x14c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a36      	ldr	r2, [pc, #216]	; (80009a0 <MX_GPIO_Init+0x14c>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <MX_GPIO_Init+0x14c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a2f      	ldr	r2, [pc, #188]	; (80009a0 <MX_GPIO_Init+0x14c>)
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <MX_GPIO_Init+0x14c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0308 	and.w	r3, r3, #8
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <MX_GPIO_Init+0x14c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a28      	ldr	r2, [pc, #160]	; (80009a0 <MX_GPIO_Init+0x14c>)
 8000900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <MX_GPIO_Init+0x14c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f244 0181 	movw	r1, #16513	; 0x4081
 8000918:	4822      	ldr	r0, [pc, #136]	; (80009a4 <MX_GPIO_Init+0x150>)
 800091a:	f001 f8db 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2140      	movs	r1, #64	; 0x40
 8000922:	4821      	ldr	r0, [pc, #132]	; (80009a8 <MX_GPIO_Init+0x154>)
 8000924:	f001 f8d6 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	481b      	ldr	r0, [pc, #108]	; (80009ac <MX_GPIO_Init+0x158>)
 8000940:	f000 ff1c 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000944:	f244 0381 	movw	r3, #16513	; 0x4081
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4811      	ldr	r0, [pc, #68]	; (80009a4 <MX_GPIO_Init+0x150>)
 800095e:	f000 ff0d 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000962:	2340      	movs	r3, #64	; 0x40
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	480b      	ldr	r0, [pc, #44]	; (80009a8 <MX_GPIO_Init+0x154>)
 800097a:	f000 feff 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_GPIO_Init+0x154>)
 8000992:	f000 fef3 	bl	800177c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	; 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020400 	.word	0x40020400
 80009a8:	40021800 	.word	0x40021800
 80009ac:	40020800 	.word	0x40020800

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <HAL_MspInit+0x4c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08e      	sub	sp, #56	; 0x38
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a55      	ldr	r2, [pc, #340]	; (8000b80 <HAL_ETH_MspInit+0x174>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	f040 80a4 	bne.w	8000b78 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
 8000a34:	4b53      	ldr	r3, [pc, #332]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a52      	ldr	r2, [pc, #328]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a40:	4b50      	ldr	r3, [pc, #320]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a48:	623b      	str	r3, [r7, #32]
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	4b4c      	ldr	r3, [pc, #304]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4a4b      	ldr	r2, [pc, #300]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5c:	4b49      	ldr	r3, [pc, #292]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a64:	61fb      	str	r3, [r7, #28]
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	4b45      	ldr	r3, [pc, #276]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	4a44      	ldr	r2, [pc, #272]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a76:	6313      	str	r3, [r2, #48]	; 0x30
 8000a78:	4b42      	ldr	r3, [pc, #264]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a80:	61bb      	str	r3, [r7, #24]
 8000a82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	4b3e      	ldr	r3, [pc, #248]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a3d      	ldr	r2, [pc, #244]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
 8000a94:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a36      	ldr	r2, [pc, #216]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	6313      	str	r3, [r2, #48]	; 0x30
 8000acc:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <HAL_ETH_MspInit+0x178>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000af4:	2332      	movs	r3, #50	; 0x32
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b04:	230b      	movs	r3, #11
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	481e      	ldr	r0, [pc, #120]	; (8000b88 <HAL_ETH_MspInit+0x17c>)
 8000b10:	f000 fe34 	bl	800177c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b14:	2386      	movs	r3, #134	; 0x86
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b24:	230b      	movs	r3, #11
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4817      	ldr	r0, [pc, #92]	; (8000b8c <HAL_ETH_MspInit+0x180>)
 8000b30:	f000 fe24 	bl	800177c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b46:	230b      	movs	r3, #11
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480f      	ldr	r0, [pc, #60]	; (8000b90 <HAL_ETH_MspInit+0x184>)
 8000b52:	f000 fe13 	bl	800177c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b68:	230b      	movs	r3, #11
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	4808      	ldr	r0, [pc, #32]	; (8000b94 <HAL_ETH_MspInit+0x188>)
 8000b74:	f000 fe02 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b78:	bf00      	nop
 8000b7a:	3738      	adds	r7, #56	; 0x38
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40028000 	.word	0x40028000
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40021800 	.word	0x40021800

08000b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bb8:	d12b      	bne.n	8000c12 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_TIM_Base_MspInit+0x84>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <HAL_TIM_Base_MspInit+0x84>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_TIM_Base_MspInit+0x84>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_TIM_Base_MspInit+0x84>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <HAL_TIM_Base_MspInit+0x84>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_TIM_Base_MspInit+0x84>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c02:	2301      	movs	r3, #1
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <HAL_TIM_Base_MspInit+0x88>)
 8000c0e:	f000 fdb5 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_UART_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12c      	bne.n	8000ca0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c90:	2307      	movs	r3, #7
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_UART_MspInit+0x8c>)
 8000c9c:	f000 fd6e 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40004800 	.word	0x40004800
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cd4:	d13f      	bne.n	8000d56 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <HAL_PCD_MspInit+0xac>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a20      	ldr	r2, [pc, #128]	; (8000d60 <HAL_PCD_MspInit+0xac>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <HAL_PCD_MspInit+0xac>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cf2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d04:	230a      	movs	r3, #10
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4815      	ldr	r0, [pc, #84]	; (8000d64 <HAL_PCD_MspInit+0xb0>)
 8000d10:	f000 fd34 	bl	800177c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <HAL_PCD_MspInit+0xb0>)
 8000d2a:	f000 fd27 	bl	800177c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_PCD_MspInit+0xac>)
 8000d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d32:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <HAL_PCD_MspInit+0xac>)
 8000d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d38:	6353      	str	r3, [r2, #52]	; 0x34
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_PCD_MspInit+0xac>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_PCD_MspInit+0xac>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_PCD_MspInit+0xac>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f890 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000de4:	f7ff ffea 	bl	8000dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dea:	490d      	ldr	r1, [pc, #52]	; (8000e20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e00:	4c0a      	ldr	r4, [pc, #40]	; (8000e2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f002 ffe7 	bl	8003de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fb69 	bl	80004e8 <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e18:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e24:	08003e68 	.word	0x08003e68
  ldr r2, =_sbss
 8000e28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e2c:	200007d8 	.word	0x200007d8

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_Init+0x40>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_Init+0x40>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_Init+0x40>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f931 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 f808 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff fda8 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x54>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f93b 	bl	8001112 <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f911 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_InitTick+0x5c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	200007d4 	.word	0x200007d4

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200007d4 	.word	0x200007d4

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff47 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff5c 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff8e 	bl	8001018 <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffb0 	bl	8001080 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e06c      	b.n	8001218 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001144:	2b00      	cmp	r3, #0
 8001146:	d106      	bne.n	8001156 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2223      	movs	r2, #35	; 0x23
 800114c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fc5b 	bl	8000a0c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b31      	ldr	r3, [pc, #196]	; (8001220 <HAL_ETH_Init+0xf4>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a30      	ldr	r2, [pc, #192]	; (8001220 <HAL_ETH_Init+0xf4>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <HAL_ETH_Init+0xf4>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001172:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <HAL_ETH_Init+0xf8>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4a2b      	ldr	r2, [pc, #172]	; (8001224 <HAL_ETH_Init+0xf8>)
 8001178:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800117c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <HAL_ETH_Init+0xf8>)
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	4927      	ldr	r1, [pc, #156]	; (8001224 <HAL_ETH_Init+0xf8>)
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <HAL_ETH_Init+0xf8>)
 800118e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a8:	f7ff feaa 	bl	8000f00 <HAL_GetTick>
 80011ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011ae:	e011      	b.n	80011d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80011b0:	f7ff fea6 	bl	8000f00 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011be:	d909      	bls.n	80011d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2204      	movs	r2, #4
 80011c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	22e0      	movs	r2, #224	; 0xe0
 80011cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e021      	b.n	8001218 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1e4      	bne.n	80011b0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f958 	bl	800149c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f9ff 	bl	80015f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 fa55 	bl	80016a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	461a      	mov	r2, r3
 80011fe:	2100      	movs	r1, #0
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f9bd 	bl	8001580 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2210      	movs	r2, #16
 8001212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40013800 	.word	0x40013800

08001228 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	4b51      	ldr	r3, [pc, #324]	; (8001384 <ETH_SetMACConfig+0x15c>)
 800123e:	4013      	ands	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	7c1b      	ldrb	r3, [r3, #16]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <ETH_SetMACConfig+0x28>
 800124a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800124e:	e000      	b.n	8001252 <ETH_SetMACConfig+0x2a>
 8001250:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	7c5b      	ldrb	r3, [r3, #17]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d102      	bne.n	8001260 <ETH_SetMACConfig+0x38>
 800125a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800125e:	e000      	b.n	8001262 <ETH_SetMACConfig+0x3a>
 8001260:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001262:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001268:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	7fdb      	ldrb	r3, [r3, #31]
 800126e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001270:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001276:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	7f92      	ldrb	r2, [r2, #30]
 800127c:	2a00      	cmp	r2, #0
 800127e:	d102      	bne.n	8001286 <ETH_SetMACConfig+0x5e>
 8001280:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001284:	e000      	b.n	8001288 <ETH_SetMACConfig+0x60>
 8001286:	2200      	movs	r2, #0
                        macconf->Speed |
 8001288:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	7f1b      	ldrb	r3, [r3, #28]
 800128e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001290:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001296:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	791b      	ldrb	r3, [r3, #4]
 800129c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800129e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80012a6:	2a00      	cmp	r2, #0
 80012a8:	d102      	bne.n	80012b0 <ETH_SetMACConfig+0x88>
 80012aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ae:	e000      	b.n	80012b2 <ETH_SetMACConfig+0x8a>
 80012b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80012b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	7bdb      	ldrb	r3, [r3, #15]
 80012b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80012ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80012c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80012c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012ca:	4313      	orrs	r3, r2
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff fe18 	bl	8000f18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80012fe:	4013      	ands	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001306:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800130e:	2a00      	cmp	r2, #0
 8001310:	d101      	bne.n	8001316 <ETH_SetMACConfig+0xee>
 8001312:	2280      	movs	r2, #128	; 0x80
 8001314:	e000      	b.n	8001318 <ETH_SetMACConfig+0xf0>
 8001316:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001318:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800131e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001326:	2a01      	cmp	r2, #1
 8001328:	d101      	bne.n	800132e <ETH_SetMACConfig+0x106>
 800132a:	2208      	movs	r2, #8
 800132c:	e000      	b.n	8001330 <ETH_SetMACConfig+0x108>
 800132e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001330:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001338:	2a01      	cmp	r2, #1
 800133a:	d101      	bne.n	8001340 <ETH_SetMACConfig+0x118>
 800133c:	2204      	movs	r2, #4
 800133e:	e000      	b.n	8001342 <ETH_SetMACConfig+0x11a>
 8001340:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001342:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800134a:	2a01      	cmp	r2, #1
 800134c:	d101      	bne.n	8001352 <ETH_SetMACConfig+0x12a>
 800134e:	2202      	movs	r2, #2
 8001350:	e000      	b.n	8001354 <ETH_SetMACConfig+0x12c>
 8001352:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001354:	4313      	orrs	r3, r2
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff fdd3 	bl	8000f18 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	619a      	str	r2, [r3, #24]
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	ff20810f 	.word	0xff20810f

08001388 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <ETH_SetDMAConfig+0x110>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	7b1b      	ldrb	r3, [r3, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d102      	bne.n	80013b4 <ETH_SetDMAConfig+0x2c>
 80013ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013b2:	e000      	b.n	80013b6 <ETH_SetDMAConfig+0x2e>
 80013b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	7b5b      	ldrb	r3, [r3, #13]
 80013ba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013bc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	7f52      	ldrb	r2, [r2, #29]
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d102      	bne.n	80013cc <ETH_SetDMAConfig+0x44>
 80013c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013ca:	e000      	b.n	80013ce <ETH_SetDMAConfig+0x46>
 80013cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80013ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	7b9b      	ldrb	r3, [r3, #14]
 80013d4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80013d6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80013dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	7f1b      	ldrb	r3, [r3, #28]
 80013e2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80013e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	7f9b      	ldrb	r3, [r3, #30]
 80013ea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80013ec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80013f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013fa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013fc:	4313      	orrs	r3, r2
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4313      	orrs	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140c:	461a      	mov	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800141e:	2001      	movs	r0, #1
 8001420:	f7ff fd7a 	bl	8000f18 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800142c:	461a      	mov	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	791b      	ldrb	r3, [r3, #4]
 8001436:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800143c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001442:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001448:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001450:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001452:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800145a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001460:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800146a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800146e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800147c:	2001      	movs	r0, #1
 800147e:	f7ff fd4b 	bl	8000f18 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	f8de3f23 	.word	0xf8de3f23

0800149c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0a6      	sub	sp, #152	; 0x98
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80014a4:	2301      	movs	r3, #1
 80014a6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80014d8:	2300      	movs	r3, #0
 80014da:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80014fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001502:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001504:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001508:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001510:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001514:	4619      	mov	r1, r3
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fe86 	bl	8001228 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800151c:	2301      	movs	r3, #1
 800151e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001520:	2301      	movs	r3, #1
 8001522:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001524:	2301      	movs	r3, #1
 8001526:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800152a:	2301      	movs	r3, #1
 800152c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800153e:	2300      	movs	r3, #0
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001542:	2301      	movs	r3, #1
 8001544:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001548:	2301      	movs	r3, #1
 800154a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800154c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001550:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001556:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800155e:	2301      	movs	r3, #1
 8001560:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001564:	2300      	movs	r3, #0
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	4619      	mov	r1, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ff08 	bl	8001388 <ETH_SetDMAConfig>
}
 8001578:	bf00      	nop
 800157a:	3798      	adds	r7, #152	; 0x98
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3305      	adds	r3, #5
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	3204      	adds	r2, #4
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	4313      	orrs	r3, r2
 800159c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <ETH_MACAddressConfig+0x68>)
 80015a2:	4413      	add	r3, r2
 80015a4:	461a      	mov	r2, r3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3303      	adds	r3, #3
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	061a      	lsls	r2, r3, #24
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3302      	adds	r3, #2
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	041b      	lsls	r3, r3, #16
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3301      	adds	r3, #1
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	4313      	orrs	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	7812      	ldrb	r2, [r2, #0]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <ETH_MACAddressConfig+0x6c>)
 80015d2:	4413      	add	r3, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	6013      	str	r3, [r2, #0]
}
 80015da:	bf00      	nop
 80015dc:	371c      	adds	r7, #28
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40028040 	.word	0x40028040
 80015ec:	40028044 	.word	0x40028044

080015f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e03e      	b.n	800167c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68d9      	ldr	r1, [r3, #12]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	3206      	adds	r2, #6
 8001630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d80c      	bhi.n	8001660 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68d9      	ldr	r1, [r3, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	461a      	mov	r2, r3
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	e004      	b.n	800166a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	461a      	mov	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3301      	adds	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d9bd      	bls.n	80015fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001694:	611a      	str	r2, [r3, #16]
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b085      	sub	sp, #20
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e046      	b.n	800173e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6919      	ldr	r1, [r3, #16]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80016f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001702:	68b9      	ldr	r1, [r7, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	3212      	adds	r2, #18
 800170a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d80c      	bhi.n	800172e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6919      	ldr	r1, [r3, #16]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	461a      	mov	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	e004      	b.n	8001738 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	461a      	mov	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3301      	adds	r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d9b5      	bls.n	80016b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176e:	60da      	str	r2, [r3, #12]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e177      	b.n	8001a88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001798:	2201      	movs	r2, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	f040 8166 	bne.w	8001a82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d005      	beq.n	80017ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d130      	bne.n	8001830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001804:	2201      	movs	r2, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 0201 	and.w	r2, r3, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b03      	cmp	r3, #3
 800183a:	d017      	beq.n	800186c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d123      	bne.n	80018c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	08da      	lsrs	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3208      	adds	r2, #8
 80018ba:	69b9      	ldr	r1, [r7, #24]
 80018bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0203 	and.w	r2, r3, #3
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80c0 	beq.w	8001a82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b66      	ldr	r3, [pc, #408]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a65      	ldr	r2, [pc, #404]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800191e:	4a61      	ldr	r2, [pc, #388]	; (8001aa4 <HAL_GPIO_Init+0x328>)
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	3302      	adds	r3, #2
 8001926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	220f      	movs	r2, #15
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a58      	ldr	r2, [pc, #352]	; (8001aa8 <HAL_GPIO_Init+0x32c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d037      	beq.n	80019ba <HAL_GPIO_Init+0x23e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a57      	ldr	r2, [pc, #348]	; (8001aac <HAL_GPIO_Init+0x330>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d031      	beq.n	80019b6 <HAL_GPIO_Init+0x23a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a56      	ldr	r2, [pc, #344]	; (8001ab0 <HAL_GPIO_Init+0x334>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d02b      	beq.n	80019b2 <HAL_GPIO_Init+0x236>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a55      	ldr	r2, [pc, #340]	; (8001ab4 <HAL_GPIO_Init+0x338>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d025      	beq.n	80019ae <HAL_GPIO_Init+0x232>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a54      	ldr	r2, [pc, #336]	; (8001ab8 <HAL_GPIO_Init+0x33c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d01f      	beq.n	80019aa <HAL_GPIO_Init+0x22e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a53      	ldr	r2, [pc, #332]	; (8001abc <HAL_GPIO_Init+0x340>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d019      	beq.n	80019a6 <HAL_GPIO_Init+0x22a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_GPIO_Init+0x344>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d013      	beq.n	80019a2 <HAL_GPIO_Init+0x226>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a51      	ldr	r2, [pc, #324]	; (8001ac4 <HAL_GPIO_Init+0x348>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d00d      	beq.n	800199e <HAL_GPIO_Init+0x222>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a50      	ldr	r2, [pc, #320]	; (8001ac8 <HAL_GPIO_Init+0x34c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d007      	beq.n	800199a <HAL_GPIO_Init+0x21e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4f      	ldr	r2, [pc, #316]	; (8001acc <HAL_GPIO_Init+0x350>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d101      	bne.n	8001996 <HAL_GPIO_Init+0x21a>
 8001992:	2309      	movs	r3, #9
 8001994:	e012      	b.n	80019bc <HAL_GPIO_Init+0x240>
 8001996:	230a      	movs	r3, #10
 8001998:	e010      	b.n	80019bc <HAL_GPIO_Init+0x240>
 800199a:	2308      	movs	r3, #8
 800199c:	e00e      	b.n	80019bc <HAL_GPIO_Init+0x240>
 800199e:	2307      	movs	r3, #7
 80019a0:	e00c      	b.n	80019bc <HAL_GPIO_Init+0x240>
 80019a2:	2306      	movs	r3, #6
 80019a4:	e00a      	b.n	80019bc <HAL_GPIO_Init+0x240>
 80019a6:	2305      	movs	r3, #5
 80019a8:	e008      	b.n	80019bc <HAL_GPIO_Init+0x240>
 80019aa:	2304      	movs	r3, #4
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x240>
 80019ae:	2303      	movs	r3, #3
 80019b0:	e004      	b.n	80019bc <HAL_GPIO_Init+0x240>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e002      	b.n	80019bc <HAL_GPIO_Init+0x240>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_GPIO_Init+0x240>
 80019ba:	2300      	movs	r3, #0
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	f002 0203 	and.w	r2, r2, #3
 80019c2:	0092      	lsls	r2, r2, #2
 80019c4:	4093      	lsls	r3, r2
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019cc:	4935      	ldr	r1, [pc, #212]	; (8001aa4 <HAL_GPIO_Init+0x328>)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <HAL_GPIO_Init+0x354>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019fe:	4a34      	ldr	r2, [pc, #208]	; (8001ad0 <HAL_GPIO_Init+0x354>)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a04:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <HAL_GPIO_Init+0x354>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a28:	4a29      	ldr	r2, [pc, #164]	; (8001ad0 <HAL_GPIO_Init+0x354>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HAL_GPIO_Init+0x354>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_GPIO_Init+0x354>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_GPIO_Init+0x354>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a7c:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <HAL_GPIO_Init+0x354>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3301      	adds	r3, #1
 8001a86:	61fb      	str	r3, [r7, #28]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b0f      	cmp	r3, #15
 8001a8c:	f67f ae84 	bls.w	8001798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40021400 	.word	0x40021400
 8001ac0:	40021800 	.word	0x40021800
 8001ac4:	40021c00 	.word	0x40021c00
 8001ac8:	40022000 	.word	0x40022000
 8001acc:	40022400 	.word	0x40022400
 8001ad0:	40013c00 	.word	0x40013c00

08001ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae4:	787b      	ldrb	r3, [r7, #1]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af0:	e003      	b.n	8001afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	041a      	lsls	r2, r3, #16
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	619a      	str	r2, [r3, #24]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af02      	add	r7, sp, #8
 8001b0c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e101      	b.n	8001d1c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff f8be 	bl	8000cb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b46:	d102      	bne.n	8001b4e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f001 fea0 	bl	8003898 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7c1a      	ldrb	r2, [r3, #16]
 8001b60:	f88d 2000 	strb.w	r2, [sp]
 8001b64:	3304      	adds	r3, #4
 8001b66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b68:	f001 fe32 	bl	80037d0 <USB_CoreInit>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0ce      	b.n	8001d1c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 fe98 	bl	80038ba <USB_SetCurrentMode>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0bf      	b.n	8001d1c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]
 8001ba0:	e04a      	b.n	8001c38 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	3315      	adds	r3, #21
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	3314      	adds	r3, #20
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	b298      	uxth	r0, r3
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	332e      	adds	r3, #46	; 0x2e
 8001bde:	4602      	mov	r2, r0
 8001be0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	440b      	add	r3, r1
 8001bf0:	3318      	adds	r3, #24
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	331c      	adds	r3, #28
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c0a:	7bfa      	ldrb	r2, [r7, #15]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	3320      	adds	r3, #32
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	3324      	adds	r3, #36	; 0x24
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	3301      	adds	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	791b      	ldrb	r3, [r3, #4]
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d3af      	bcc.n	8001ba2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	e044      	b.n	8001cd2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c8a:	7bfa      	ldrb	r2, [r7, #15]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	791b      	ldrb	r3, [r3, #4]
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d3b5      	bcc.n	8001c48 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7c1a      	ldrb	r2, [r3, #16]
 8001ce4:	f88d 2000 	strb.w	r2, [sp]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cec:	f001 fe32 	bl	8003954 <USB_DevInit>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00c      	b.n	8001d1c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f001 fffa 	bl	8003d0e <USB_DevDisconnect>

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e267      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d075      	beq.n	8001e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d42:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d00c      	beq.n	8001d68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4e:	4b85      	ldr	r3, [pc, #532]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d112      	bne.n	8001d80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5a:	4b82      	ldr	r3, [pc, #520]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d66:	d10b      	bne.n	8001d80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	4b7e      	ldr	r3, [pc, #504]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d05b      	beq.n	8001e2c <HAL_RCC_OscConfig+0x108>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d157      	bne.n	8001e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e242      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d88:	d106      	bne.n	8001d98 <HAL_RCC_OscConfig+0x74>
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a75      	ldr	r2, [pc, #468]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e01d      	b.n	8001dd4 <HAL_RCC_OscConfig+0xb0>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x98>
 8001da2:	4b70      	ldr	r3, [pc, #448]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a6f      	ldr	r2, [pc, #444]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b6d      	ldr	r3, [pc, #436]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a6c      	ldr	r2, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e00b      	b.n	8001dd4 <HAL_RCC_OscConfig+0xb0>
 8001dbc:	4b69      	ldr	r3, [pc, #420]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a68      	ldr	r2, [pc, #416]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b66      	ldr	r3, [pc, #408]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a65      	ldr	r2, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff f890 	bl	8000f00 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de4:	f7ff f88c 	bl	8000f00 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e207      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0xc0>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff f87c 	bl	8000f00 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff f878 	bl	8000f00 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e1f3      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1e:	4b51      	ldr	r3, [pc, #324]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0xe8>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d063      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3a:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e46:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d11c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e52:	4b44      	ldr	r3, [pc, #272]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d116      	bne.n	8001e8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_RCC_OscConfig+0x152>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e1c7      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e76:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4937      	ldr	r1, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8a:	e03a      	b.n	8001f02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e94:	4b34      	ldr	r3, [pc, #208]	; (8001f68 <HAL_RCC_OscConfig+0x244>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff f831 	bl	8000f00 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7ff f82d 	bl	8000f00 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e1a8      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec0:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4925      	ldr	r1, [pc, #148]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
 8001ed4:	e015      	b.n	8001f02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed6:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_RCC_OscConfig+0x244>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff f810 	bl	8000f00 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7ff f80c 	bl	8000f00 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e187      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d036      	beq.n	8001f7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_RCC_OscConfig+0x248>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7fe fff0 	bl	8000f00 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f24:	f7fe ffec 	bl	8000f00 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e167      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x200>
 8001f42:	e01b      	b.n	8001f7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_RCC_OscConfig+0x248>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7fe ffd9 	bl	8000f00 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f50:	e00e      	b.n	8001f70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f52:	f7fe ffd5 	bl	8000f00 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d907      	bls.n	8001f70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e150      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
 8001f64:	40023800 	.word	0x40023800
 8001f68:	42470000 	.word	0x42470000
 8001f6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f70:	4b88      	ldr	r3, [pc, #544]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8001f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1ea      	bne.n	8001f52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 8097 	beq.w	80020b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8e:	4b81      	ldr	r3, [pc, #516]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10f      	bne.n	8001fba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	4b7d      	ldr	r3, [pc, #500]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a7c      	ldr	r2, [pc, #496]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b7a      	ldr	r3, [pc, #488]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fba:	4b77      	ldr	r3, [pc, #476]	; (8002198 <HAL_RCC_OscConfig+0x474>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d118      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc6:	4b74      	ldr	r3, [pc, #464]	; (8002198 <HAL_RCC_OscConfig+0x474>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a73      	ldr	r2, [pc, #460]	; (8002198 <HAL_RCC_OscConfig+0x474>)
 8001fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd2:	f7fe ff95 	bl	8000f00 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fda:	f7fe ff91 	bl	8000f00 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e10c      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_OscConfig+0x474>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x2ea>
 8002000:	4b64      	ldr	r3, [pc, #400]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a63      	ldr	r2, [pc, #396]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	e01c      	b.n	8002048 <HAL_RCC_OscConfig+0x324>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b05      	cmp	r3, #5
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x30c>
 8002016:	4b5f      	ldr	r3, [pc, #380]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a5e      	ldr	r2, [pc, #376]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	6713      	str	r3, [r2, #112]	; 0x70
 8002022:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a5b      	ldr	r2, [pc, #364]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6713      	str	r3, [r2, #112]	; 0x70
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0x324>
 8002030:	4b58      	ldr	r3, [pc, #352]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002034:	4a57      	ldr	r2, [pc, #348]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002036:	f023 0301 	bic.w	r3, r3, #1
 800203a:	6713      	str	r3, [r2, #112]	; 0x70
 800203c:	4b55      	ldr	r3, [pc, #340]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002040:	4a54      	ldr	r2, [pc, #336]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002042:	f023 0304 	bic.w	r3, r3, #4
 8002046:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d015      	beq.n	800207c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002050:	f7fe ff56 	bl	8000f00 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002056:	e00a      	b.n	800206e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002058:	f7fe ff52 	bl	8000f00 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	; 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e0cb      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206e:	4b49      	ldr	r3, [pc, #292]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0ee      	beq.n	8002058 <HAL_RCC_OscConfig+0x334>
 800207a:	e014      	b.n	80020a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7fe ff40 	bl	8000f00 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002082:	e00a      	b.n	800209a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002084:	f7fe ff3c 	bl	8000f00 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0b5      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209a:	4b3e      	ldr	r3, [pc, #248]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ee      	bne.n	8002084 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020a6:	7dfb      	ldrb	r3, [r7, #23]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ac:	4b39      	ldr	r3, [pc, #228]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	4a38      	ldr	r2, [pc, #224]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 80020b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80a1 	beq.w	8002204 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020c2:	4b34      	ldr	r3, [pc, #208]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d05c      	beq.n	8002188 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d141      	bne.n	800215a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d6:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_RCC_OscConfig+0x478>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7fe ff10 	bl	8000f00 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e4:	f7fe ff0c 	bl	8000f00 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e087      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f6:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	019b      	lsls	r3, r3, #6
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	085b      	lsrs	r3, r3, #1
 800211a:	3b01      	subs	r3, #1
 800211c:	041b      	lsls	r3, r3, #16
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	061b      	lsls	r3, r3, #24
 8002126:	491b      	ldr	r1, [pc, #108]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_RCC_OscConfig+0x478>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7fe fee5 	bl	8000f00 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213a:	f7fe fee1 	bl	8000f00 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e05c      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x416>
 8002158:	e054      	b.n	8002204 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_RCC_OscConfig+0x478>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7fe fece 	bl	8000f00 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002168:	f7fe feca 	bl	8000f00 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e045      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x444>
 8002186:	e03d      	b.n	8002204 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e038      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
 8002194:	40023800 	.word	0x40023800
 8002198:	40007000 	.word	0x40007000
 800219c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x4ec>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d028      	beq.n	8002200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d121      	bne.n	8002200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d11a      	bne.n	8002200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021d0:	4013      	ands	r3, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d8:	4293      	cmp	r3, r2
 80021da:	d111      	bne.n	8002200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	085b      	lsrs	r3, r3, #1
 80021e8:	3b01      	subs	r3, #1
 80021ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800

08002214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0cc      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002228:	4b68      	ldr	r3, [pc, #416]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d90c      	bls.n	8002250 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b65      	ldr	r3, [pc, #404]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b63      	ldr	r3, [pc, #396]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0b8      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d020      	beq.n	800229e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002268:	4b59      	ldr	r3, [pc, #356]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a58      	ldr	r2, [pc, #352]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002272:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002280:	4b53      	ldr	r3, [pc, #332]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a52      	ldr	r2, [pc, #328]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800228a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228c:	4b50      	ldr	r3, [pc, #320]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	494d      	ldr	r1, [pc, #308]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d044      	beq.n	8002334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b47      	ldr	r3, [pc, #284]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d119      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e07f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d003      	beq.n	80022d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	4b3f      	ldr	r3, [pc, #252]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e06f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e2:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e067      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f2:	4b37      	ldr	r3, [pc, #220]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f023 0203 	bic.w	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4934      	ldr	r1, [pc, #208]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002304:	f7fe fdfc 	bl	8000f00 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230a:	e00a      	b.n	8002322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230c:	f7fe fdf8 	bl	8000f00 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e04f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 020c 	and.w	r2, r3, #12
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	429a      	cmp	r2, r3
 8002332:	d1eb      	bne.n	800230c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d20c      	bcs.n	800235c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e032      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4916      	ldr	r1, [pc, #88]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	490e      	ldr	r1, [pc, #56]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800239a:	f000 f821 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 800239e:	4602      	mov	r2, r0
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	490a      	ldr	r1, [pc, #40]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	5ccb      	ldrb	r3, [r1, r3]
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_RCC_ClockConfig+0x1c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fd5c 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023c00 	.word	0x40023c00
 80023d0:	40023800 	.word	0x40023800
 80023d4:	08003e40 	.word	0x08003e40
 80023d8:	20000000 	.word	0x20000000
 80023dc:	20000004 	.word	0x20000004

080023e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e4:	b094      	sub	sp, #80	; 0x50
 80023e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	647b      	str	r3, [r7, #68]	; 0x44
 80023ec:	2300      	movs	r3, #0
 80023ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023f0:	2300      	movs	r3, #0
 80023f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f8:	4b79      	ldr	r3, [pc, #484]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b08      	cmp	r3, #8
 8002402:	d00d      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0x40>
 8002404:	2b08      	cmp	r3, #8
 8002406:	f200 80e1 	bhi.w	80025cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x34>
 800240e:	2b04      	cmp	r3, #4
 8002410:	d003      	beq.n	800241a <HAL_RCC_GetSysClockFreq+0x3a>
 8002412:	e0db      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002414:	4b73      	ldr	r3, [pc, #460]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002416:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002418:	e0db      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800241a:	4b73      	ldr	r3, [pc, #460]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800241c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800241e:	e0d8      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002420:	4b6f      	ldr	r3, [pc, #444]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002428:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800242a:	4b6d      	ldr	r3, [pc, #436]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d063      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002436:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	099b      	lsrs	r3, r3, #6
 800243c:	2200      	movs	r2, #0
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002440:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
 800244a:	2300      	movs	r3, #0
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
 800244e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002452:	4622      	mov	r2, r4
 8002454:	462b      	mov	r3, r5
 8002456:	f04f 0000 	mov.w	r0, #0
 800245a:	f04f 0100 	mov.w	r1, #0
 800245e:	0159      	lsls	r1, r3, #5
 8002460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002464:	0150      	lsls	r0, r2, #5
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4621      	mov	r1, r4
 800246c:	1a51      	subs	r1, r2, r1
 800246e:	6139      	str	r1, [r7, #16]
 8002470:	4629      	mov	r1, r5
 8002472:	eb63 0301 	sbc.w	r3, r3, r1
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002484:	4659      	mov	r1, fp
 8002486:	018b      	lsls	r3, r1, #6
 8002488:	4651      	mov	r1, sl
 800248a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800248e:	4651      	mov	r1, sl
 8002490:	018a      	lsls	r2, r1, #6
 8002492:	4651      	mov	r1, sl
 8002494:	ebb2 0801 	subs.w	r8, r2, r1
 8002498:	4659      	mov	r1, fp
 800249a:	eb63 0901 	sbc.w	r9, r3, r1
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024b2:	4690      	mov	r8, r2
 80024b4:	4699      	mov	r9, r3
 80024b6:	4623      	mov	r3, r4
 80024b8:	eb18 0303 	adds.w	r3, r8, r3
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	462b      	mov	r3, r5
 80024c0:	eb49 0303 	adc.w	r3, r9, r3
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024d2:	4629      	mov	r1, r5
 80024d4:	024b      	lsls	r3, r1, #9
 80024d6:	4621      	mov	r1, r4
 80024d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024dc:	4621      	mov	r1, r4
 80024de:	024a      	lsls	r2, r1, #9
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e6:	2200      	movs	r2, #0
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024f0:	f7fd fe7c 	bl	80001ec <__aeabi_uldivmod>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4613      	mov	r3, r2
 80024fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024fc:	e058      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024fe:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	099b      	lsrs	r3, r3, #6
 8002504:	2200      	movs	r2, #0
 8002506:	4618      	mov	r0, r3
 8002508:	4611      	mov	r1, r2
 800250a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800250e:	623b      	str	r3, [r7, #32]
 8002510:	2300      	movs	r3, #0
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
 8002514:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002518:	4642      	mov	r2, r8
 800251a:	464b      	mov	r3, r9
 800251c:	f04f 0000 	mov.w	r0, #0
 8002520:	f04f 0100 	mov.w	r1, #0
 8002524:	0159      	lsls	r1, r3, #5
 8002526:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800252a:	0150      	lsls	r0, r2, #5
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4641      	mov	r1, r8
 8002532:	ebb2 0a01 	subs.w	sl, r2, r1
 8002536:	4649      	mov	r1, r9
 8002538:	eb63 0b01 	sbc.w	fp, r3, r1
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002548:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800254c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002550:	ebb2 040a 	subs.w	r4, r2, sl
 8002554:	eb63 050b 	sbc.w	r5, r3, fp
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	00eb      	lsls	r3, r5, #3
 8002562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002566:	00e2      	lsls	r2, r4, #3
 8002568:	4614      	mov	r4, r2
 800256a:	461d      	mov	r5, r3
 800256c:	4643      	mov	r3, r8
 800256e:	18e3      	adds	r3, r4, r3
 8002570:	603b      	str	r3, [r7, #0]
 8002572:	464b      	mov	r3, r9
 8002574:	eb45 0303 	adc.w	r3, r5, r3
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002586:	4629      	mov	r1, r5
 8002588:	028b      	lsls	r3, r1, #10
 800258a:	4621      	mov	r1, r4
 800258c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002590:	4621      	mov	r1, r4
 8002592:	028a      	lsls	r2, r1, #10
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259a:	2200      	movs	r2, #0
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	61fa      	str	r2, [r7, #28]
 80025a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a4:	f7fd fe22 	bl	80001ec <__aeabi_uldivmod>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4613      	mov	r3, r2
 80025ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	3301      	adds	r3, #1
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80025c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ca:	e002      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80025ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3750      	adds	r7, #80	; 0x50
 80025d8:	46bd      	mov	sp, r7
 80025da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	00f42400 	.word	0x00f42400
 80025e8:	007a1200 	.word	0x007a1200

080025ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <HAL_RCC_GetHCLKFreq+0x14>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000000 	.word	0x20000000

08002604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002608:	f7ff fff0 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	0a9b      	lsrs	r3, r3, #10
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40023800 	.word	0x40023800
 8002628:	08003e50 	.word	0x08003e50

0800262c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002630:	f7ff ffdc 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0b5b      	lsrs	r3, r3, #13
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4903      	ldr	r1, [pc, #12]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	08003e50 	.word	0x08003e50

08002654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e041      	b.n	80026ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe fa8c 	bl	8000b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3304      	adds	r3, #4
 8002690:	4619      	mov	r1, r3
 8002692:	4610      	mov	r0, r2
 8002694:	f000 fac6 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e041      	b.n	8002788 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d106      	bne.n	800271e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f839 	bl	8002790 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2202      	movs	r2, #2
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3304      	adds	r3, #4
 800272e:	4619      	mov	r1, r3
 8002730:	4610      	mov	r0, r2
 8002732:	f000 fa77 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d104      	bne.n	80027be <HAL_TIM_IC_Start+0x1a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	e013      	b.n	80027e6 <HAL_TIM_IC_Start+0x42>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d104      	bne.n	80027ce <HAL_TIM_IC_Start+0x2a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	e00b      	b.n	80027e6 <HAL_TIM_IC_Start+0x42>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d104      	bne.n	80027de <HAL_TIM_IC_Start+0x3a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	e003      	b.n	80027e6 <HAL_TIM_IC_Start+0x42>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d104      	bne.n	80027f8 <HAL_TIM_IC_Start+0x54>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e013      	b.n	8002820 <HAL_TIM_IC_Start+0x7c>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d104      	bne.n	8002808 <HAL_TIM_IC_Start+0x64>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002804:	b2db      	uxtb	r3, r3
 8002806:	e00b      	b.n	8002820 <HAL_TIM_IC_Start+0x7c>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	2b08      	cmp	r3, #8
 800280c:	d104      	bne.n	8002818 <HAL_TIM_IC_Start+0x74>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002814:	b2db      	uxtb	r3, r3
 8002816:	e003      	b.n	8002820 <HAL_TIM_IC_Start+0x7c>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800281e:	b2db      	uxtb	r3, r3
 8002820:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d102      	bne.n	800282e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002828:	7bbb      	ldrb	r3, [r7, #14]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d001      	beq.n	8002832 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e081      	b.n	8002936 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <HAL_TIM_IC_Start+0x9e>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002840:	e013      	b.n	800286a <HAL_TIM_IC_Start+0xc6>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d104      	bne.n	8002852 <HAL_TIM_IC_Start+0xae>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002850:	e00b      	b.n	800286a <HAL_TIM_IC_Start+0xc6>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b08      	cmp	r3, #8
 8002856:	d104      	bne.n	8002862 <HAL_TIM_IC_Start+0xbe>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002860:	e003      	b.n	800286a <HAL_TIM_IC_Start+0xc6>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2202      	movs	r2, #2
 8002866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d104      	bne.n	800287a <HAL_TIM_IC_Start+0xd6>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002878:	e013      	b.n	80028a2 <HAL_TIM_IC_Start+0xfe>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d104      	bne.n	800288a <HAL_TIM_IC_Start+0xe6>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002888:	e00b      	b.n	80028a2 <HAL_TIM_IC_Start+0xfe>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d104      	bne.n	800289a <HAL_TIM_IC_Start+0xf6>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002898:	e003      	b.n	80028a2 <HAL_TIM_IC_Start+0xfe>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2202      	movs	r2, #2
 800289e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2201      	movs	r2, #1
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fc2a 	bl	8003104 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a22      	ldr	r2, [pc, #136]	; (8002940 <HAL_TIM_IC_Start+0x19c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d022      	beq.n	8002900 <HAL_TIM_IC_Start+0x15c>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c2:	d01d      	beq.n	8002900 <HAL_TIM_IC_Start+0x15c>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1e      	ldr	r2, [pc, #120]	; (8002944 <HAL_TIM_IC_Start+0x1a0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d018      	beq.n	8002900 <HAL_TIM_IC_Start+0x15c>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1d      	ldr	r2, [pc, #116]	; (8002948 <HAL_TIM_IC_Start+0x1a4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d013      	beq.n	8002900 <HAL_TIM_IC_Start+0x15c>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_TIM_IC_Start+0x1a8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00e      	beq.n	8002900 <HAL_TIM_IC_Start+0x15c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <HAL_TIM_IC_Start+0x1ac>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d009      	beq.n	8002900 <HAL_TIM_IC_Start+0x15c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a18      	ldr	r2, [pc, #96]	; (8002954 <HAL_TIM_IC_Start+0x1b0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d004      	beq.n	8002900 <HAL_TIM_IC_Start+0x15c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <HAL_TIM_IC_Start+0x1b4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d111      	bne.n	8002924 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b06      	cmp	r3, #6
 8002910:	d010      	beq.n	8002934 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002922:	e007      	b.n	8002934 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40010000 	.word	0x40010000
 8002944:	40000400 	.word	0x40000400
 8002948:	40000800 	.word	0x40000800
 800294c:	40000c00 	.word	0x40000c00
 8002950:	40010400 	.word	0x40010400
 8002954:	40014000 	.word	0x40014000
 8002958:	40001800 	.word	0x40001800

0800295c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002976:	2302      	movs	r3, #2
 8002978:	e088      	b.n	8002a8c <HAL_TIM_IC_ConfigChannel+0x130>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d11b      	bne.n	80029c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002998:	f000 f9f0 	bl	8002d7c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 020c 	bic.w	r2, r2, #12
 80029aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6999      	ldr	r1, [r3, #24]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	619a      	str	r2, [r3, #24]
 80029be:	e060      	b.n	8002a82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d11c      	bne.n	8002a00 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80029d6:	f000 fa74 	bl	8002ec2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80029e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6999      	ldr	r1, [r3, #24]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	021a      	lsls	r2, r3, #8
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	619a      	str	r2, [r3, #24]
 80029fe:	e040      	b.n	8002a82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d11b      	bne.n	8002a3e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002a16:	f000 fac1 	bl	8002f9c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69da      	ldr	r2, [r3, #28]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 020c 	bic.w	r2, r2, #12
 8002a28:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69d9      	ldr	r1, [r3, #28]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	61da      	str	r2, [r3, #28]
 8002a3c:	e021      	b.n	8002a82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b0c      	cmp	r3, #12
 8002a42:	d11c      	bne.n	8002a7e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002a54:	f000 fade 	bl	8003014 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a66:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69d9      	ldr	r1, [r3, #28]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	021a      	lsls	r2, r3, #8
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	61da      	str	r2, [r3, #28]
 8002a7c:	e001      	b.n	8002a82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e0b4      	b.n	8002c1a <HAL_TIM_ConfigClockSource+0x186>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae8:	d03e      	beq.n	8002b68 <HAL_TIM_ConfigClockSource+0xd4>
 8002aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aee:	f200 8087 	bhi.w	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af6:	f000 8086 	beq.w	8002c06 <HAL_TIM_ConfigClockSource+0x172>
 8002afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afe:	d87f      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b00:	2b70      	cmp	r3, #112	; 0x70
 8002b02:	d01a      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0xa6>
 8002b04:	2b70      	cmp	r3, #112	; 0x70
 8002b06:	d87b      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b08:	2b60      	cmp	r3, #96	; 0x60
 8002b0a:	d050      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x11a>
 8002b0c:	2b60      	cmp	r3, #96	; 0x60
 8002b0e:	d877      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b50      	cmp	r3, #80	; 0x50
 8002b12:	d03c      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0xfa>
 8002b14:	2b50      	cmp	r3, #80	; 0x50
 8002b16:	d873      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	2b40      	cmp	r3, #64	; 0x40
 8002b1a:	d058      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x13a>
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d86f      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	2b30      	cmp	r3, #48	; 0x30
 8002b22:	d064      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15a>
 8002b24:	2b30      	cmp	r3, #48	; 0x30
 8002b26:	d86b      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d060      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15a>
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d867      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d05c      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15a>
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d05a      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15a>
 8002b38:	e062      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b4a:	f000 fabb 	bl	80030c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	609a      	str	r2, [r3, #8]
      break;
 8002b66:	e04f      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b78:	f000 faa4 	bl	80030c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b8a:	609a      	str	r2, [r3, #8]
      break;
 8002b8c:	e03c      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f000 f962 	bl	8002e64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2150      	movs	r1, #80	; 0x50
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fa71 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002bac:	e02c      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f000 f9be 	bl	8002f3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2160      	movs	r1, #96	; 0x60
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fa61 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002bcc:	e01c      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f000 f942 	bl	8002e64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2140      	movs	r1, #64	; 0x40
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fa51 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002bec:	e00c      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f000 fa48 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002bfe:	e003      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      break;
 8002c04:	e000      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a46      	ldr	r2, [pc, #280]	; (8002d50 <TIM_Base_SetConfig+0x12c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d013      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c42:	d00f      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a43      	ldr	r2, [pc, #268]	; (8002d54 <TIM_Base_SetConfig+0x130>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00b      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a42      	ldr	r2, [pc, #264]	; (8002d58 <TIM_Base_SetConfig+0x134>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d007      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a41      	ldr	r2, [pc, #260]	; (8002d5c <TIM_Base_SetConfig+0x138>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d003      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a40      	ldr	r2, [pc, #256]	; (8002d60 <TIM_Base_SetConfig+0x13c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d108      	bne.n	8002c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a35      	ldr	r2, [pc, #212]	; (8002d50 <TIM_Base_SetConfig+0x12c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d02b      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d027      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a32      	ldr	r2, [pc, #200]	; (8002d54 <TIM_Base_SetConfig+0x130>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d023      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a31      	ldr	r2, [pc, #196]	; (8002d58 <TIM_Base_SetConfig+0x134>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01f      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a30      	ldr	r2, [pc, #192]	; (8002d5c <TIM_Base_SetConfig+0x138>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01b      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a2f      	ldr	r2, [pc, #188]	; (8002d60 <TIM_Base_SetConfig+0x13c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d017      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2e      	ldr	r2, [pc, #184]	; (8002d64 <TIM_Base_SetConfig+0x140>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a2d      	ldr	r2, [pc, #180]	; (8002d68 <TIM_Base_SetConfig+0x144>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00f      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a2c      	ldr	r2, [pc, #176]	; (8002d6c <TIM_Base_SetConfig+0x148>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00b      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <TIM_Base_SetConfig+0x14c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d007      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a2a      	ldr	r2, [pc, #168]	; (8002d74 <TIM_Base_SetConfig+0x150>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d003      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a29      	ldr	r2, [pc, #164]	; (8002d78 <TIM_Base_SetConfig+0x154>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d108      	bne.n	8002ce8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a10      	ldr	r2, [pc, #64]	; (8002d50 <TIM_Base_SetConfig+0x12c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <TIM_Base_SetConfig+0xf8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <TIM_Base_SetConfig+0x13c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d103      	bne.n	8002d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f023 0201 	bic.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]
  }
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40010000 	.word	0x40010000
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40000800 	.word	0x40000800
 8002d5c:	40000c00 	.word	0x40000c00
 8002d60:	40010400 	.word	0x40010400
 8002d64:	40014000 	.word	0x40014000
 8002d68:	40014400 	.word	0x40014400
 8002d6c:	40014800 	.word	0x40014800
 8002d70:	40001800 	.word	0x40001800
 8002d74:	40001c00 	.word	0x40001c00
 8002d78:	40002000 	.word	0x40002000

08002d7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f023 0201 	bic.w	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <TIM_TI1_SetConfig+0xcc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01b      	beq.n	8002de2 <TIM_TI1_SetConfig+0x66>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db0:	d017      	beq.n	8002de2 <TIM_TI1_SetConfig+0x66>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <TIM_TI1_SetConfig+0xd0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <TIM_TI1_SetConfig+0x66>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a24      	ldr	r2, [pc, #144]	; (8002e50 <TIM_TI1_SetConfig+0xd4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00f      	beq.n	8002de2 <TIM_TI1_SetConfig+0x66>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4a23      	ldr	r2, [pc, #140]	; (8002e54 <TIM_TI1_SetConfig+0xd8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00b      	beq.n	8002de2 <TIM_TI1_SetConfig+0x66>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <TIM_TI1_SetConfig+0xdc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d007      	beq.n	8002de2 <TIM_TI1_SetConfig+0x66>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <TIM_TI1_SetConfig+0xe0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <TIM_TI1_SetConfig+0x66>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a20      	ldr	r2, [pc, #128]	; (8002e60 <TIM_TI1_SetConfig+0xe4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d101      	bne.n	8002de6 <TIM_TI1_SetConfig+0x6a>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <TIM_TI1_SetConfig+0x6c>
 8002de6:	2300      	movs	r3, #0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f023 0303 	bic.w	r3, r3, #3
 8002df2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e003      	b.n	8002e06 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f023 030a 	bic.w	r3, r3, #10
 8002e20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f003 030a 	and.w	r3, r3, #10
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	621a      	str	r2, [r3, #32]
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40010000 	.word	0x40010000
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800
 8002e54:	40000c00 	.word	0x40000c00
 8002e58:	40010400 	.word	0x40010400
 8002e5c:	40014000 	.word	0x40014000
 8002e60:	40001800 	.word	0x40001800

08002e64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f023 0201 	bic.w	r2, r3, #1
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f023 030a 	bic.w	r3, r3, #10
 8002ea0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	621a      	str	r2, [r3, #32]
}
 8002eb6:	bf00      	nop
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b087      	sub	sp, #28
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f023 0210 	bic.w	r2, r3, #16
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	031b      	lsls	r3, r3, #12
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f14:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	621a      	str	r2, [r3, #32]
}
 8002f30:	bf00      	nop
 8002f32:	371c      	adds	r7, #28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f023 0210 	bic.w	r2, r3, #16
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	031b      	lsls	r3, r3, #12
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	621a      	str	r2, [r3, #32]
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f023 0303 	bic.w	r3, r3, #3
 8002fc8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fd8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002fec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	621a      	str	r2, [r3, #32]
}
 8003008:	bf00      	nop
 800300a:	371c      	adds	r7, #28
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003040:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003052:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	031b      	lsls	r3, r3, #12
 8003058:	b29b      	uxth	r3, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003066:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	031b      	lsls	r3, r3, #12
 800306c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	621a      	str	r2, [r3, #32]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f043 0307 	orr.w	r3, r3, #7
 80030b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	609a      	str	r2, [r3, #8]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	021a      	lsls	r2, r3, #8
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	609a      	str	r2, [r3, #8]
}
 80030f8:	bf00      	nop
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2201      	movs	r2, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a1a      	ldr	r2, [r3, #32]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	43db      	mvns	r3, r3
 8003126:	401a      	ands	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a1a      	ldr	r2, [r3, #32]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	431a      	orrs	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	621a      	str	r2, [r3, #32]
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003164:	2302      	movs	r3, #2
 8003166:	e05a      	b.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a21      	ldr	r2, [pc, #132]	; (800322c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d022      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b4:	d01d      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1d      	ldr	r2, [pc, #116]	; (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d018      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1b      	ldr	r2, [pc, #108]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1a      	ldr	r2, [pc, #104]	; (8003238 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00e      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a18      	ldr	r2, [pc, #96]	; (800323c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a17      	ldr	r2, [pc, #92]	; (8003240 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a15      	ldr	r2, [pc, #84]	; (8003244 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d10c      	bne.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	4313      	orrs	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40010000 	.word	0x40010000
 8003230:	40000400 	.word	0x40000400
 8003234:	40000800 	.word	0x40000800
 8003238:	40000c00 	.word	0x40000c00
 800323c:	40010400 	.word	0x40010400
 8003240:	40014000 	.word	0x40014000
 8003244:	40001800 	.word	0x40001800

08003248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e042      	b.n	80032e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fd fcd8 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800328a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f82b 	bl	80032e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ec:	b0c0      	sub	sp, #256	; 0x100
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003304:	68d9      	ldr	r1, [r3, #12]
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	ea40 0301 	orr.w	r3, r0, r1
 8003310:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	431a      	orrs	r2, r3
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	431a      	orrs	r2, r3
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003340:	f021 010c 	bic.w	r1, r1, #12
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800334e:	430b      	orrs	r3, r1
 8003350:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003362:	6999      	ldr	r1, [r3, #24]
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	ea40 0301 	orr.w	r3, r0, r1
 800336e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4b8f      	ldr	r3, [pc, #572]	; (80035b4 <UART_SetConfig+0x2cc>)
 8003378:	429a      	cmp	r2, r3
 800337a:	d005      	beq.n	8003388 <UART_SetConfig+0xa0>
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b8d      	ldr	r3, [pc, #564]	; (80035b8 <UART_SetConfig+0x2d0>)
 8003384:	429a      	cmp	r2, r3
 8003386:	d104      	bne.n	8003392 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003388:	f7ff f950 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 800338c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003390:	e003      	b.n	800339a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003392:	f7ff f937 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 8003396:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a4:	f040 810c 	bne.w	80035c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ac:	2200      	movs	r2, #0
 80033ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033ba:	4622      	mov	r2, r4
 80033bc:	462b      	mov	r3, r5
 80033be:	1891      	adds	r1, r2, r2
 80033c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80033c2:	415b      	adcs	r3, r3
 80033c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033ca:	4621      	mov	r1, r4
 80033cc:	eb12 0801 	adds.w	r8, r2, r1
 80033d0:	4629      	mov	r1, r5
 80033d2:	eb43 0901 	adc.w	r9, r3, r1
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ea:	4690      	mov	r8, r2
 80033ec:	4699      	mov	r9, r3
 80033ee:	4623      	mov	r3, r4
 80033f0:	eb18 0303 	adds.w	r3, r8, r3
 80033f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033f8:	462b      	mov	r3, r5
 80033fa:	eb49 0303 	adc.w	r3, r9, r3
 80033fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800340e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003412:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003416:	460b      	mov	r3, r1
 8003418:	18db      	adds	r3, r3, r3
 800341a:	653b      	str	r3, [r7, #80]	; 0x50
 800341c:	4613      	mov	r3, r2
 800341e:	eb42 0303 	adc.w	r3, r2, r3
 8003422:	657b      	str	r3, [r7, #84]	; 0x54
 8003424:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003428:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800342c:	f7fc fede 	bl	80001ec <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4b61      	ldr	r3, [pc, #388]	; (80035bc <UART_SetConfig+0x2d4>)
 8003436:	fba3 2302 	umull	r2, r3, r3, r2
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	011c      	lsls	r4, r3, #4
 800343e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003442:	2200      	movs	r2, #0
 8003444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003448:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800344c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003450:	4642      	mov	r2, r8
 8003452:	464b      	mov	r3, r9
 8003454:	1891      	adds	r1, r2, r2
 8003456:	64b9      	str	r1, [r7, #72]	; 0x48
 8003458:	415b      	adcs	r3, r3
 800345a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800345c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003460:	4641      	mov	r1, r8
 8003462:	eb12 0a01 	adds.w	sl, r2, r1
 8003466:	4649      	mov	r1, r9
 8003468:	eb43 0b01 	adc.w	fp, r3, r1
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003478:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800347c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003480:	4692      	mov	sl, r2
 8003482:	469b      	mov	fp, r3
 8003484:	4643      	mov	r3, r8
 8003486:	eb1a 0303 	adds.w	r3, sl, r3
 800348a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800348e:	464b      	mov	r3, r9
 8003490:	eb4b 0303 	adc.w	r3, fp, r3
 8003494:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034ac:	460b      	mov	r3, r1
 80034ae:	18db      	adds	r3, r3, r3
 80034b0:	643b      	str	r3, [r7, #64]	; 0x40
 80034b2:	4613      	mov	r3, r2
 80034b4:	eb42 0303 	adc.w	r3, r2, r3
 80034b8:	647b      	str	r3, [r7, #68]	; 0x44
 80034ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034c2:	f7fc fe93 	bl	80001ec <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4611      	mov	r1, r2
 80034cc:	4b3b      	ldr	r3, [pc, #236]	; (80035bc <UART_SetConfig+0x2d4>)
 80034ce:	fba3 2301 	umull	r2, r3, r3, r1
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2264      	movs	r2, #100	; 0x64
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	1acb      	subs	r3, r1, r3
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034e2:	4b36      	ldr	r3, [pc, #216]	; (80035bc <UART_SetConfig+0x2d4>)
 80034e4:	fba3 2302 	umull	r2, r3, r3, r2
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034f0:	441c      	add	r4, r3
 80034f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003500:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003504:	4642      	mov	r2, r8
 8003506:	464b      	mov	r3, r9
 8003508:	1891      	adds	r1, r2, r2
 800350a:	63b9      	str	r1, [r7, #56]	; 0x38
 800350c:	415b      	adcs	r3, r3
 800350e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003510:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003514:	4641      	mov	r1, r8
 8003516:	1851      	adds	r1, r2, r1
 8003518:	6339      	str	r1, [r7, #48]	; 0x30
 800351a:	4649      	mov	r1, r9
 800351c:	414b      	adcs	r3, r1
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800352c:	4659      	mov	r1, fp
 800352e:	00cb      	lsls	r3, r1, #3
 8003530:	4651      	mov	r1, sl
 8003532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003536:	4651      	mov	r1, sl
 8003538:	00ca      	lsls	r2, r1, #3
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	4603      	mov	r3, r0
 8003540:	4642      	mov	r2, r8
 8003542:	189b      	adds	r3, r3, r2
 8003544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003548:	464b      	mov	r3, r9
 800354a:	460a      	mov	r2, r1
 800354c:	eb42 0303 	adc.w	r3, r2, r3
 8003550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003560:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003564:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003568:	460b      	mov	r3, r1
 800356a:	18db      	adds	r3, r3, r3
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
 800356e:	4613      	mov	r3, r2
 8003570:	eb42 0303 	adc.w	r3, r2, r3
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003576:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800357a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800357e:	f7fc fe35 	bl	80001ec <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <UART_SetConfig+0x2d4>)
 8003588:	fba3 1302 	umull	r1, r3, r3, r2
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	2164      	movs	r1, #100	; 0x64
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	3332      	adds	r3, #50	; 0x32
 800359a:	4a08      	ldr	r2, [pc, #32]	; (80035bc <UART_SetConfig+0x2d4>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	f003 0207 	and.w	r2, r3, #7
 80035a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4422      	add	r2, r4
 80035ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035b0:	e106      	b.n	80037c0 <UART_SetConfig+0x4d8>
 80035b2:	bf00      	nop
 80035b4:	40011000 	.word	0x40011000
 80035b8:	40011400 	.word	0x40011400
 80035bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c4:	2200      	movs	r2, #0
 80035c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035d2:	4642      	mov	r2, r8
 80035d4:	464b      	mov	r3, r9
 80035d6:	1891      	adds	r1, r2, r2
 80035d8:	6239      	str	r1, [r7, #32]
 80035da:	415b      	adcs	r3, r3
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035e2:	4641      	mov	r1, r8
 80035e4:	1854      	adds	r4, r2, r1
 80035e6:	4649      	mov	r1, r9
 80035e8:	eb43 0501 	adc.w	r5, r3, r1
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	00eb      	lsls	r3, r5, #3
 80035f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fa:	00e2      	lsls	r2, r4, #3
 80035fc:	4614      	mov	r4, r2
 80035fe:	461d      	mov	r5, r3
 8003600:	4643      	mov	r3, r8
 8003602:	18e3      	adds	r3, r4, r3
 8003604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003608:	464b      	mov	r3, r9
 800360a:	eb45 0303 	adc.w	r3, r5, r3
 800360e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800361e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800362e:	4629      	mov	r1, r5
 8003630:	008b      	lsls	r3, r1, #2
 8003632:	4621      	mov	r1, r4
 8003634:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003638:	4621      	mov	r1, r4
 800363a:	008a      	lsls	r2, r1, #2
 800363c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003640:	f7fc fdd4 	bl	80001ec <__aeabi_uldivmod>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4b60      	ldr	r3, [pc, #384]	; (80037cc <UART_SetConfig+0x4e4>)
 800364a:	fba3 2302 	umull	r2, r3, r3, r2
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	011c      	lsls	r4, r3, #4
 8003652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003656:	2200      	movs	r2, #0
 8003658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800365c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003660:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003664:	4642      	mov	r2, r8
 8003666:	464b      	mov	r3, r9
 8003668:	1891      	adds	r1, r2, r2
 800366a:	61b9      	str	r1, [r7, #24]
 800366c:	415b      	adcs	r3, r3
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003674:	4641      	mov	r1, r8
 8003676:	1851      	adds	r1, r2, r1
 8003678:	6139      	str	r1, [r7, #16]
 800367a:	4649      	mov	r1, r9
 800367c:	414b      	adcs	r3, r1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800368c:	4659      	mov	r1, fp
 800368e:	00cb      	lsls	r3, r1, #3
 8003690:	4651      	mov	r1, sl
 8003692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003696:	4651      	mov	r1, sl
 8003698:	00ca      	lsls	r2, r1, #3
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	4642      	mov	r2, r8
 80036a2:	189b      	adds	r3, r3, r2
 80036a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036a8:	464b      	mov	r3, r9
 80036aa:	460a      	mov	r2, r1
 80036ac:	eb42 0303 	adc.w	r3, r2, r3
 80036b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80036be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036cc:	4649      	mov	r1, r9
 80036ce:	008b      	lsls	r3, r1, #2
 80036d0:	4641      	mov	r1, r8
 80036d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036d6:	4641      	mov	r1, r8
 80036d8:	008a      	lsls	r2, r1, #2
 80036da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036de:	f7fc fd85 	bl	80001ec <__aeabi_uldivmod>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4611      	mov	r1, r2
 80036e8:	4b38      	ldr	r3, [pc, #224]	; (80037cc <UART_SetConfig+0x4e4>)
 80036ea:	fba3 2301 	umull	r2, r3, r3, r1
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	2264      	movs	r2, #100	; 0x64
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	1acb      	subs	r3, r1, r3
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	3332      	adds	r3, #50	; 0x32
 80036fc:	4a33      	ldr	r2, [pc, #204]	; (80037cc <UART_SetConfig+0x4e4>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003708:	441c      	add	r4, r3
 800370a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800370e:	2200      	movs	r2, #0
 8003710:	673b      	str	r3, [r7, #112]	; 0x70
 8003712:	677a      	str	r2, [r7, #116]	; 0x74
 8003714:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003718:	4642      	mov	r2, r8
 800371a:	464b      	mov	r3, r9
 800371c:	1891      	adds	r1, r2, r2
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	415b      	adcs	r3, r3
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003728:	4641      	mov	r1, r8
 800372a:	1851      	adds	r1, r2, r1
 800372c:	6039      	str	r1, [r7, #0]
 800372e:	4649      	mov	r1, r9
 8003730:	414b      	adcs	r3, r1
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003740:	4659      	mov	r1, fp
 8003742:	00cb      	lsls	r3, r1, #3
 8003744:	4651      	mov	r1, sl
 8003746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800374a:	4651      	mov	r1, sl
 800374c:	00ca      	lsls	r2, r1, #3
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	4603      	mov	r3, r0
 8003754:	4642      	mov	r2, r8
 8003756:	189b      	adds	r3, r3, r2
 8003758:	66bb      	str	r3, [r7, #104]	; 0x68
 800375a:	464b      	mov	r3, r9
 800375c:	460a      	mov	r2, r1
 800375e:	eb42 0303 	adc.w	r3, r2, r3
 8003762:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	663b      	str	r3, [r7, #96]	; 0x60
 800376e:	667a      	str	r2, [r7, #100]	; 0x64
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800377c:	4649      	mov	r1, r9
 800377e:	008b      	lsls	r3, r1, #2
 8003780:	4641      	mov	r1, r8
 8003782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003786:	4641      	mov	r1, r8
 8003788:	008a      	lsls	r2, r1, #2
 800378a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800378e:	f7fc fd2d 	bl	80001ec <__aeabi_uldivmod>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <UART_SetConfig+0x4e4>)
 8003798:	fba3 1302 	umull	r1, r3, r3, r2
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	2164      	movs	r1, #100	; 0x64
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	3332      	adds	r3, #50	; 0x32
 80037aa:	4a08      	ldr	r2, [pc, #32]	; (80037cc <UART_SetConfig+0x4e4>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	f003 020f 	and.w	r2, r3, #15
 80037b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4422      	add	r2, r4
 80037be:	609a      	str	r2, [r3, #8]
}
 80037c0:	bf00      	nop
 80037c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037c6:	46bd      	mov	sp, r7
 80037c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037cc:	51eb851f 	.word	0x51eb851f

080037d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037d0:	b084      	sub	sp, #16
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	f107 001c 	add.w	r0, r7, #28
 80037de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037e2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d123      	bne.n	8003832 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80037fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003812:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003816:	2b01      	cmp	r3, #1
 8003818:	d105      	bne.n	8003826 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 faa0 	bl	8003d6c <USB_CoreReset>
 800382c:	4603      	mov	r3, r0
 800382e:	73fb      	strb	r3, [r7, #15]
 8003830:	e01b      	b.n	800386a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa94 	bl	8003d6c <USB_CoreReset>
 8003844:	4603      	mov	r3, r0
 8003846:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003848:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
 800385c:	e005      	b.n	800386a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800386a:	7fbb      	ldrb	r3, [r7, #30]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d10b      	bne.n	8003888 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f043 0206 	orr.w	r2, r3, #6
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003894:	b004      	add	sp, #16
 8003896:	4770      	bx	lr

08003898 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f023 0201 	bic.w	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	460b      	mov	r3, r1
 80038c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d115      	bne.n	8003908 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80038e8:	200a      	movs	r0, #10
 80038ea:	f7fd fb15 	bl	8000f18 <HAL_Delay>
      ms += 10U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	330a      	adds	r3, #10
 80038f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fa2b 	bl	8003d50 <USB_GetMode>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d01e      	beq.n	800393e <USB_SetCurrentMode+0x84>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2bc7      	cmp	r3, #199	; 0xc7
 8003904:	d9f0      	bls.n	80038e8 <USB_SetCurrentMode+0x2e>
 8003906:	e01a      	b.n	800393e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d115      	bne.n	800393a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800391a:	200a      	movs	r0, #10
 800391c:	f7fd fafc 	bl	8000f18 <HAL_Delay>
      ms += 10U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	330a      	adds	r3, #10
 8003924:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fa12 	bl	8003d50 <USB_GetMode>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d005      	beq.n	800393e <USB_SetCurrentMode+0x84>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2bc7      	cmp	r3, #199	; 0xc7
 8003936:	d9f0      	bls.n	800391a <USB_SetCurrentMode+0x60>
 8003938:	e001      	b.n	800393e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e005      	b.n	800394a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2bc8      	cmp	r3, #200	; 0xc8
 8003942:	d101      	bne.n	8003948 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003954:	b084      	sub	sp, #16
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800396e:	2300      	movs	r3, #0
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	e009      	b.n	8003988 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	3340      	adds	r3, #64	; 0x40
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	2200      	movs	r2, #0
 8003980:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	3301      	adds	r3, #1
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b0e      	cmp	r3, #14
 800398c:	d9f2      	bls.n	8003974 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800398e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11c      	bne.n	80039d0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
 80039ce:	e00b      	b.n	80039e8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039ee:	461a      	mov	r2, r3
 80039f0:	2300      	movs	r3, #0
 80039f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039f4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d10d      	bne.n	8003a18 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d104      	bne.n	8003a0e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a04:	2100      	movs	r1, #0
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f968 	bl	8003cdc <USB_SetDevSpeed>
 8003a0c:	e008      	b.n	8003a20 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a0e:	2101      	movs	r1, #1
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f963 	bl	8003cdc <USB_SetDevSpeed>
 8003a16:	e003      	b.n	8003a20 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a18:	2103      	movs	r1, #3
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f95e 	bl	8003cdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a20:	2110      	movs	r1, #16
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8fa 	bl	8003c1c <USB_FlushTxFifo>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f924 	bl	8003c80 <USB_FlushRxFifo>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a54:	461a      	mov	r2, r3
 8003a56:	2300      	movs	r3, #0
 8003a58:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a60:	461a      	mov	r2, r3
 8003a62:	2300      	movs	r3, #0
 8003a64:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	e043      	b.n	8003af4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a82:	d118      	bne.n	8003ab6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a96:	461a      	mov	r2, r3
 8003a98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e013      	b.n	8003ac8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aac:	461a      	mov	r2, r3
 8003aae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	e008      	b.n	8003ac8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	3301      	adds	r3, #1
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003af8:	461a      	mov	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d3b5      	bcc.n	8003a6c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	e043      	b.n	8003b8e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b1c:	d118      	bne.n	8003b50 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b30:	461a      	mov	r2, r3
 8003b32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	e013      	b.n	8003b62 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b46:	461a      	mov	r2, r3
 8003b48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e008      	b.n	8003b62 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2300      	movs	r3, #0
 8003b60:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2300      	movs	r3, #0
 8003b72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	461a      	mov	r2, r3
 8003b82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b92:	461a      	mov	r2, r3
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d3b5      	bcc.n	8003b06 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003bba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d105      	bne.n	8003bd0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f043 0210 	orr.w	r2, r3, #16
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699a      	ldr	r2, [r3, #24]
 8003bd4:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <USB_DevInit+0x2c4>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003bdc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f043 0208 	orr.w	r2, r3, #8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bf0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c14:	b004      	add	sp, #16
 8003c16:	4770      	bx	lr
 8003c18:	803c3800 	.word	0x803c3800

08003c1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003c36:	d901      	bls.n	8003c3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e01b      	b.n	8003c74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	daf2      	bge.n	8003c2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	019b      	lsls	r3, r3, #6
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3301      	adds	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003c60:	d901      	bls.n	8003c66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e006      	b.n	8003c74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b20      	cmp	r3, #32
 8003c70:	d0f0      	beq.n	8003c54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003c98:	d901      	bls.n	8003c9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e018      	b.n	8003cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	daf2      	bge.n	8003c8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2210      	movs	r2, #16
 8003cae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003cbc:	d901      	bls.n	8003cc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e006      	b.n	8003cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d0f0      	beq.n	8003cb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	68f9      	ldr	r1, [r7, #12]
 8003cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d28:	f023 0303 	bic.w	r3, r3, #3
 8003d2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d3c:	f043 0302 	orr.w	r3, r3, #2
 8003d40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003d84:	d901      	bls.n	8003d8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e01b      	b.n	8003dc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	daf2      	bge.n	8003d78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f043 0201 	orr.w	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3301      	adds	r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003dae:	d901      	bls.n	8003db4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e006      	b.n	8003dc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d0f0      	beq.n	8003da2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <memset>:
 8003dce:	4402      	add	r2, r0
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d100      	bne.n	8003dd8 <memset+0xa>
 8003dd6:	4770      	bx	lr
 8003dd8:	f803 1b01 	strb.w	r1, [r3], #1
 8003ddc:	e7f9      	b.n	8003dd2 <memset+0x4>
	...

08003de0 <__libc_init_array>:
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	4d0d      	ldr	r5, [pc, #52]	; (8003e18 <__libc_init_array+0x38>)
 8003de4:	4c0d      	ldr	r4, [pc, #52]	; (8003e1c <__libc_init_array+0x3c>)
 8003de6:	1b64      	subs	r4, r4, r5
 8003de8:	10a4      	asrs	r4, r4, #2
 8003dea:	2600      	movs	r6, #0
 8003dec:	42a6      	cmp	r6, r4
 8003dee:	d109      	bne.n	8003e04 <__libc_init_array+0x24>
 8003df0:	4d0b      	ldr	r5, [pc, #44]	; (8003e20 <__libc_init_array+0x40>)
 8003df2:	4c0c      	ldr	r4, [pc, #48]	; (8003e24 <__libc_init_array+0x44>)
 8003df4:	f000 f818 	bl	8003e28 <_init>
 8003df8:	1b64      	subs	r4, r4, r5
 8003dfa:	10a4      	asrs	r4, r4, #2
 8003dfc:	2600      	movs	r6, #0
 8003dfe:	42a6      	cmp	r6, r4
 8003e00:	d105      	bne.n	8003e0e <__libc_init_array+0x2e>
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
 8003e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e08:	4798      	blx	r3
 8003e0a:	3601      	adds	r6, #1
 8003e0c:	e7ee      	b.n	8003dec <__libc_init_array+0xc>
 8003e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e12:	4798      	blx	r3
 8003e14:	3601      	adds	r6, #1
 8003e16:	e7f2      	b.n	8003dfe <__libc_init_array+0x1e>
 8003e18:	08003e60 	.word	0x08003e60
 8003e1c:	08003e60 	.word	0x08003e60
 8003e20:	08003e60 	.word	0x08003e60
 8003e24:	08003e64 	.word	0x08003e64

08003e28 <_init>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	bf00      	nop
 8003e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2e:	bc08      	pop	{r3}
 8003e30:	469e      	mov	lr, r3
 8003e32:	4770      	bx	lr

08003e34 <_fini>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	bf00      	nop
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr
